// <auto-generated />
using System;
using BankManagment_Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankManagment_Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230823184948_one")]
    partial class one
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BankManagment_Domain.Entity.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6275087a-891f-4d17-bab3-556ca853c7d2"),
                            Name = "Liability"
                        },
                        new
                        {
                            Id = new Guid("2ef49c40-ce42-47a8-a983-2535003a9023"),
                            Name = "Asset"
                        });
                });

            modelBuilder.Entity("BankManagment_Domain.Entity.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AccountTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalBalance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("BankAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d1ba01b-e860-4f9c-ab1e-83584e144124"),
                            AccountNumber = "80349014",
                            AccountTypeId = new Guid("df5f2fd9-fb28-4ab0-9582-519ef71566c3"),
                            FirstName = "Akash",
                            LastName = "Rana",
                            OpeningDate = new DateTime(2023, 8, 24, 0, 19, 47, 980, DateTimeKind.Local).AddTicks(5650),
                            TotalBalance = 1000m
                        },
                        new
                        {
                            Id = new Guid("86ea06a2-d037-4fff-ba01-b795bd72d214"),
                            AccountNumber = "53999320",
                            AccountTypeId = new Guid("df5f2fd9-fb28-4ab0-9582-519ef71566c3"),
                            FirstName = "Akash",
                            LastName = "Rana",
                            OpeningDate = new DateTime(2023, 8, 23, 0, 19, 47, 980, DateTimeKind.Local).AddTicks(5673),
                            TotalBalance = 1000m
                        },
                        new
                        {
                            Id = new Guid("2b0af3c3-10b6-46bc-8291-4fef421c4ba1"),
                            AccountNumber = "28950592",
                            AccountTypeId = new Guid("df5f2fd9-fb28-4ab0-9582-519ef71566c3"),
                            FirstName = "Akash",
                            LastName = "Rana",
                            OpeningDate = new DateTime(2023, 8, 22, 0, 19, 47, 980, DateTimeKind.Local).AddTicks(5678),
                            TotalBalance = 1000m
                        },
                        new
                        {
                            Id = new Guid("51536717-9ccd-4a98-a0b2-e5281123c8a1"),
                            AccountNumber = "47227226",
                            AccountTypeId = new Guid("df5f2fd9-fb28-4ab0-9582-519ef71566c3"),
                            FirstName = "Akash",
                            LastName = "Rana",
                            OpeningDate = new DateTime(2023, 8, 21, 0, 19, 47, 980, DateTimeKind.Local).AddTicks(5683),
                            TotalBalance = 1000m
                        },
                        new
                        {
                            Id = new Guid("4deea147-0299-4caa-81be-a2260c74ee38"),
                            AccountNumber = "75104870",
                            AccountTypeId = new Guid("df5f2fd9-fb28-4ab0-9582-519ef71566c3"),
                            FirstName = "Akash",
                            LastName = "Rana",
                            OpeningDate = new DateTime(2023, 8, 20, 0, 19, 47, 980, DateTimeKind.Local).AddTicks(5689),
                            TotalBalance = 1000m
                        });
                });

            modelBuilder.Entity("BankManagment_Domain.Entity.BankTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BankAccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PaymentMethodID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionPersonFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionPersonLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionPersonMiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountID");

                    b.HasIndex("PaymentMethodID");

                    b.ToTable("BankTransactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e047a47-1e7f-4284-9d02-93c76e249b05"),
                            Amount = 948.896981609242000m,
                            BankAccountID = new Guid("00000000-0000-0000-0000-000000000000"),
                            Category = "Normal Transactions",
                            PaymentMethodID = new Guid("00000000-0000-0000-0000-000000000000"),
                            TransactionDate = new DateTime(2023, 8, 24, 0, 19, 47, 980, DateTimeKind.Local).AddTicks(5823),
                            TransactionPersonFirstName = "Akash",
                            TransactionPersonLastName = "Rana",
                            TransactionType = "Credit"
                        },
                        new
                        {
                            Id = new Guid("d364d88e-1f53-48b1-b895-035a5570be7d"),
                            Amount = 231.35737198547000m,
                            BankAccountID = new Guid("00000000-0000-0000-0000-000000000000"),
                            Category = "Bank Charges",
                            PaymentMethodID = new Guid("00000000-0000-0000-0000-000000000000"),
                            TransactionDate = new DateTime(2023, 8, 23, 0, 19, 47, 980, DateTimeKind.Local).AddTicks(5828),
                            TransactionPersonFirstName = "Akash",
                            TransactionPersonLastName = "Rana",
                            TransactionType = "Debit"
                        },
                        new
                        {
                            Id = new Guid("b86bf147-9f53-401a-adc0-5c4a674e5e20"),
                            Amount = 383.865094655055000m,
                            BankAccountID = new Guid("00000000-0000-0000-0000-000000000000"),
                            Category = "Bank Interest",
                            PaymentMethodID = new Guid("00000000-0000-0000-0000-000000000000"),
                            TransactionDate = new DateTime(2023, 8, 22, 0, 19, 47, 980, DateTimeKind.Local).AddTicks(5831),
                            TransactionPersonFirstName = "Akash",
                            TransactionPersonLastName = "Rana",
                            TransactionType = "Credit"
                        },
                        new
                        {
                            Id = new Guid("c573bde5-752a-4b7f-8080-1fa1f37e8fa0"),
                            Amount = 501.880672867526000m,
                            BankAccountID = new Guid("00000000-0000-0000-0000-000000000000"),
                            Category = "Bank Charges",
                            PaymentMethodID = new Guid("00000000-0000-0000-0000-000000000000"),
                            TransactionDate = new DateTime(2023, 8, 21, 0, 19, 47, 980, DateTimeKind.Local).AddTicks(5837),
                            TransactionPersonFirstName = "Akash",
                            TransactionPersonLastName = "Rana",
                            TransactionType = "Debit"
                        },
                        new
                        {
                            Id = new Guid("6a0d5711-5c27-4a71-8ecb-6db310393bf5"),
                            Amount = 280.375245429027000m,
                            BankAccountID = new Guid("00000000-0000-0000-0000-000000000000"),
                            Category = "Normal Transactions",
                            PaymentMethodID = new Guid("00000000-0000-0000-0000-000000000000"),
                            TransactionDate = new DateTime(2023, 8, 20, 0, 19, 47, 980, DateTimeKind.Local).AddTicks(5840),
                            TransactionPersonFirstName = "Akash",
                            TransactionPersonLastName = "Rana",
                            TransactionType = "Credit"
                        });
                });

            modelBuilder.Entity("BankManagment_Domain.Entity.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d201d6f8-2ba5-4807-b8a8-c50b2e08c45c"),
                            Name = "Cash"
                        },
                        new
                        {
                            Id = new Guid("3f65991b-f79d-4040-a87f-22577f58db32"),
                            Name = "Cheque"
                        },
                        new
                        {
                            Id = new Guid("94ff73c0-e71e-4bb1-9c24-4b9532109987"),
                            Name = "NEFT"
                        },
                        new
                        {
                            Id = new Guid("7d86873e-dfb0-432e-8042-7c73b0a3ceb4"),
                            Name = "RTGS"
                        },
                        new
                        {
                            Id = new Guid("2b0b7594-004c-46ec-a650-f8bacaf42f3a"),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("BankManagment_Domain.Entity.BankAccount", b =>
                {
                    b.HasOne("BankManagment_Domain.Entity.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("BankManagment_Domain.Entity.BankTransaction", b =>
                {
                    b.HasOne("BankManagment_Domain.Entity.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankManagment_Domain.Entity.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("PaymentMethod");
                });
#pragma warning restore 612, 618
        }
    }
}
